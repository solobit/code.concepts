{
  "name": "strformat",
  "version": "0.0.3",
  "description": "Node.js string formatting the way you expect it to work.",
  "keywords": [
    "string",
    "format"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "contributors": [
    {
      "name": "Frank Hellwig",
      "email": "frank@hellwig.org"
    },
    {
      "name": "Johan Hernandez",
      "email": "johan@firebase.co"
    }
  ],
  "scripts": {
    "test": "node test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/fhellwig/strformat.git"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "main": "./strformat.js",
  "readme": "# strformat\r\n\r\nNode.js string formatting the way you expect it to work.\r\n\r\n## Installation\r\n\r\n    npm install strformat\r\n\r\n## API\r\n\r\n    strformat(str, args...)\r\n\r\nReplaces the placeholders in `str` with the substitution values in `args...`.\r\nThe `args...` parameter can be an object, an array, or a list of values.\r\n\r\nIf the second parameter is an object, then the placeholders are in the form of\r\n`{<property>}` where the `<property>` is a property of the object.\r\n(Please see the Advanced Topics section for nested properties as well as\r\nmultiple object replacement values.)\r\n\r\nIf the second parameter is an array or a list of values, then the placeholders\r\nare in the form of `{<n>}` where `<n>` is either the array index or the\r\npositional index of the substitution value in the argument list.\r\n\r\nPlaceholders are escaped by doubling them (e.g., {{0}}). Any placeholder not\r\nmatching an argument is left alone.\r\n\r\nReturns the formatted string.\r\n\r\n## Examples\r\n\r\nFor all examples, the `strformat` function is exported by the `strformat` module:\r\n\r\n```javascript\r\nvar strformat = require('strformat');\r\n```\r\n\r\n### Object property substitution\r\n\r\n```javascript\r\nvar logfile = strformat('/var/log/{name}.log', require('./package.json'));\r\nconsole.log(logfile);\r\n```\r\n\r\n>Output: `/var/log/strformat.log`\r\n\r\n### Array index substitution\r\n\r\n```javascript\r\nvar code = [404, 'Not Found'];\r\nvar status = strformat('status code {0} is \"{1}\"', code);\r\nconsole.log(status);\r\n```\r\n\r\n>Output: `status code 404 is \"Not Found\"`\r\n\r\n### Positional argument substitution\r\n\r\n```javascript\r\nvar message = strformat('please press {0} for {1}', 'F1', 'help');\r\nconsole.log(message);\r\n```\r\n\r\n>Output: `please press F1 for help`\r\n\r\n## Advanced Topics\r\n\r\nObject property replacement can be nested. For example, given the object\r\n\r\n```javascript\r\nvar contact = {\r\n    name: {\r\n        first: 'John',\r\n        last: 'Smith'\r\n    },\r\n    phone: {\r\n        work: '123-4567',\r\n        home: '555-1212'\r\n    }\r\n};\r\n```\r\n\r\nThen the following will resolve as expected:\r\n\r\n```javascript\r\nstrformat('Your full name is {name.first} {name.last}', contact);\r\n```\r\n\r\nThis also works with indexed properties:\r\n\r\n```javascript\r\nstrformat('{0}: {1.phone.home}', 'Home Phone', contact);\r\n```\r\n\r\nWhen the number of additional arguments is greater than one, an index value\r\n*must* be the first item in any replacement specifier.\r\n\r\n```javascript\r\nstrformat('{0.1} {1.0}', [4, 5], [7, 8]);\r\n```\r\n\r\nThis results in the string '5 7' since the first values index the arguments by\r\nposition while the second values select the array element.\r\n\r\n## Test\r\n\r\n    $ npm test\r\n\r\n## Contributors\r\n\r\n- Frank Hellwig (fhellwig)\r\n- Johan Hernandez (thepumpkin1979)\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Frank Hellwig\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to\r\ndeal in the Software without restriction, including without limitation the\r\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\nsell copies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\nIN THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "_id": "strformat@0.0.3",
  "dist": {
    "shasum": "fb429e8fb0478aa83de1d15f229de5a8cf435398"
  },
  "_from": "strformat@0.0.x"
}
