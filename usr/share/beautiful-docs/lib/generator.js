// Generated by CoffeeScript 1.4.0
(function() {
  var Generator, async, coffee, eco, fs, less, path, util, _;

  eco = require('eco');

  path = require('path');

  fs = require('fs');

  util = require('util');

  _ = require('underscore');

  less = require('less');

  coffee = require('coffee-script');

  async = require('async');

  Generator = (function() {

    function Generator(options) {
      var l, url;
      this.options = _.extend({
        assetsDir: path.join(__dirname, "assets"),
        templatesDir: path.join(__dirname, "templates/beautiful-docs"),
        templates: {
          layout: 'layout.html',
          page: 'page.html',
          index: 'index.html'
        },
        baseUrl: '',
        noHeader: false,
        noToc: false
      }, options);
      url = this.options.baseUrl;
      l = url.length;
      if (l > 0 && url[l - l] !== '/') {
        this.options.baseUrl += '/';
      }
    }

    Generator.prototype.render = function(filename, vars, callback) {
      var _this = this;
      return fs.readFile(path.join(this.options.templatesDir, filename), function(err, data) {
        var html;
        if (err) {
          return callback(err);
        }
        html = eco.render(data.toString(), _.extend({}, _this.options, vars));
        return callback(null, html);
      });
    };

    Generator.prototype.mkdir = function(dir, callback) {
      var _this = this;
      return fs.exists(dir, function(exists) {
        if (exists) {
          return callback(null);
        }
        return _this.mkdir(path.dirname(dir), function(err) {
          if (err) {
            return callback(err);
          }
          return fs.mkdir(dir, callback);
        });
      });
    };

    Generator.prototype.copy = function(src, dest, callback) {
      return this.mkdir(path.dirname(dest), function(err) {
        var ins, outs;
        if (err) {
          return callback(err);
        }
        ins = fs.createReadStream(src);
        outs = fs.createWriteStream(dest);
        return util.pump(ins, outs, callback);
      });
    };

    Generator.prototype.generateIndex = function(title, manifests, filename, callback) {
      var categories, m, name, vars, _i, _len;
      if (callback == null) {
        callback = null;
      }
      categories = {};
      for (_i = 0, _len = manifests.length; _i < _len; _i++) {
        m = manifests[_i];
        name = m.category || 'All Projects';
        if (!categories[name]) {
          categories[name] = [];
        }
        categories[name].push(m);
      }
      vars = {
        title: title,
        categories: categories
      };
      return this.render(this.options.templates.index, vars, function(err, content) {
        if (err) {
          if (callback) {
            callback(err);
          }
          return;
        }
        return fs.writeFile(filename, content, callback);
      });
    };

    Generator.prototype.generate = function(manifest, destDir, callback) {
      var allContent, copyStylesheet, render, renderAll, renderFile, renderFiles,
        _this = this;
      if (callback == null) {
        callback = null;
      }
      allContent = '';
      render = function(filename, vars, callback) {
        return _this.render(filename, _.extend({
          manifest: manifest
        }, vars), callback);
      };
      renderFile = function(file, filename, cb) {
        var copyAsset;
        copyAsset = function(a, c) {
          return _this.copy(file.makeRelativeUri(a), path.join(destDir, a), c);
        };
        return render(_this.options.templates.page, {
          content: file.content
        }, function(err, content) {
          if (err) {
            return cb(err);
          }
          return render(_this.options.templates.layout, {
            content: content
          }, function(err, content) {
            if (err) {
              return cb(err);
            }
            return fs.writeFile(path.join(destDir, filename + '.html'), content, function(err) {
              if (err) {
                return cb(err);
              }
              return async.forEach(file.assets, copyAsset, cb);
            });
          });
        });
      };
      renderFiles = function(cb) {
        var file, i, lock, _ref, _results;
        lock = manifest.files.length;
        _ref = manifest.files;
        _results = [];
        for (i in _ref) {
          file = _ref[i];
          if (manifest.ignoreFirstFileForToc && i === 0) {
            continue;
          }
          allContent += file.content + "\n";
          _results.push(renderFile(file, file.slug, function() {
            if (--lock === 0) {
              return cb();
            }
          }));
        }
        return _results;
      };
      renderAll = function(cb) {
        var content;
        content = "<div id='content'>" + allContent + "</div>";
        return render(_this.options.templates.layout, {
          content: content
        }, function(err, content) {
          if (err) {
            return cb(err);
          }
          return fs.writeFile(path.join(destDir, 'all.html'), content, cb);
        });
      };
      copyStylesheet = function(cb) {
        var filename;
        if (!(manifest.options.css != null)) {
          return cb();
        }
        filename = manifest.options.css;
        if (filename.substr(0, 1) !== '/' && !filename.match(/^(https?):\/\//)) {
          return _this.copy(manifest.makeRelativeUri(filename), path.join(destDir, filename), cb);
        } else {
          return cb();
        }
      };
      return async.series([
        (function(cb) {
          return _this.mkdir(destDir, cb);
        }), (function(cb) {
          return renderFile(manifest.files[0], 'index', cb);
        }), renderFiles, renderAll, copyStylesheet
      ], function(err) {
        if (callback) {
          return callback(err);
        }
      });
    };

    Generator.prototype.copyAssets = function(destDir, srcDir, compileLessOrCoffee, callback) {
      var copyFile, handleFile, handleFiles,
        _this = this;
      if (srcDir == null) {
        srcDir = this.options.assetsDir;
      }
      if (compileLessOrCoffee == null) {
        compileLessOrCoffee = true;
      }
      if (callback == null) {
        callback = null;
      }
      if (typeof srcDir === 'function') {
        callback = srcDir;
        srcDir = this.options.assetsDir;
      }
      copyFile = function(pathname, filename, cb) {
        if (compileLessOrCoffee && path.extname(filename) === '.less') {
          return fs.readFile(pathname, function(err, data) {
            var target;
            if (err) {
              return cb(err);
            }
            target = path.join(destDir, path.basename(filename, path.extname(filename)) + '.css');
            return less.render(data.toString(), function(e, css) {
              return fs.writeFile(target, css, cb);
            });
          });
        } else if (compileLessOrCoffee && path.extname(filename) === '.coffee') {
          return fs.readFile(pathname, function(err, data) {
            var target;
            if (err) {
              return cb(err);
            }
            target = path.join(destDir, path.basename(filename, path.extname(filename)) + '.js');
            return fs.writeFile(target, coffee.compile(data.toString()), cb);
          });
        } else {
          return _this.copy(pathname, path.join(destDir, filename), cb);
        }
      };
      handleFile = function(filename, cb) {
        var pathname;
        pathname = path.join(srcDir, filename);
        return fs.stat(pathname, function(err, stat) {
          if (err) {
            return cb(err);
          }
          if (stat.isDirectory()) {
            return _this.copyAssets(path.join(destDir, filename), pathname, compileLessOrCoffee, cb);
          } else {
            return copyFile(pathname, filename, cb);
          }
        });
      };
      handleFiles = function(err, files, cb) {
        if (err) {
          return cb(err);
        }
        return async.forEach(files, handleFile, cb);
      };
      return async.series([
        (function(cb) {
          return _this.mkdir(destDir, cb);
        }), (function(cb) {
          return fs.readdir(srcDir, function(err, files) {
            return handleFiles(err, files, cb);
          });
        })
      ], function(err) {
        if (callback) {
          return callback(err);
        }
      });
    };

    return Generator;

  })();

  module.exports = Generator;

}).call(this);
