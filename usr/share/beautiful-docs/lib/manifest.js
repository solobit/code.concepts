// Generated by CoffeeScript 1.4.0
(function() {
  var Manifest, ManifestFile, async, cleanHtmlString, extractNameFromUri, fs, generateSlug, makeUriRelativeTo, marked, path, url, _;

  fs = require('fs');

  path = require('path');

  url = require('url');

  marked = require('marked');

  async = require('async');

  _ = require('underscore');

  generateSlug = function(str) {
    str = str.toLowerCase();
    str = str.replace(/^\s+|\s+$/g, "");
    str = str.replace(/[\/_|\s]+/g, "-");
    str = str.replace(/[^a-z0-9-]+/g, "");
    str = str.replace(/[-]+/g, "-");
    return str = str.replace(/^-+|-+$/g, "");
  };

  cleanHtmlString = function(input, allowed) {
    var comments, tags;
    allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');
    tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi;
    comments = /<!--[\s\S]*?-->/gi;
    return input.replace(comments, '').replace(tags, function($0, $1) {
      if (allowed.indexOf('<' + $1.toLowerCase() + '>') > -1) {
        return $0;
      } else {
        return '';
      }
    });
  };

  extractNameFromUri = function(filename) {
    return path.basename(filename, path.extname(filename));
  };

  makeUriRelativeTo = function(uri, relativeTo) {
    if (uri.substr(0, 1) === '/') {
      return uri;
    } else {
      return path.join(relativeTo, uri);
    }
  };

  ManifestFile = (function() {

    ManifestFile.load = function(manifest, uri, callback) {
      var f;
      f = new ManifestFile(manifest, uri);
      return f.refresh(function(err) {
        return callback(err, f);
      });
    };

    function ManifestFile(manifest, uri) {
      this.uri = uri;
      this.manifest = manifest;
      this.slug = generateSlug(extractNameFromUri(this.uri));
    }

    ManifestFile.prototype.refresh = function(callback) {
      var _this = this;
      if (callback == null) {
        callback = null;
      }
      return fs.readFile(this.uri, function(err, data) {
        if (err) {
          if (callback) {
            callback(err);
          }
          return;
        }
        _this.raw = data.toString();
        _this.render();
        return callback(null);
      });
    };

    ManifestFile.prototype.makeRelativeUri = function(uri) {
      return makeUriRelativeTo(uri, path.dirname(this.uri));
    };

    ManifestFile.prototype.render = function() {
      var anchor, hTag, hTags, html, img, imgs, new_img, src, title, _i, _j, _len, _len1, _ref, _ref1;
      html = marked(this.raw);
      this.assets = [];
      imgs = html.match(/<img[^>]*>/gi);
      _ref = imgs || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        img = _ref[_i];
        src = img.match(/src=("|')([^"']+)\1/i);
        if (src && !src[2].match(/^(https?):\/\//)) {
          if (!this.manifest.options.makeAssetsRelativeToGithub) {
            this.assets.push(src[2]);
          } else {
            url = 'https://github.com/' + this.manifest.options.makeAssetsRelativeToGithub + '/raw/master/' + src[2];
            new_img = img.replace(src[2], url);
            html = html.replace(img, new_img);
          }
        }
      }
      hTags = html.match(/<h([1-6])>.+<\/h\1>/gi);
      _ref1 = hTags || [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        hTag = _ref1[_j];
        title = hTag.substring(hTag.indexOf('>') + 1, hTag.lastIndexOf('<'));
        anchor = generateSlug(title);
        html = html.replace(hTag, '<a name="' + anchor + '"></a>' + hTag);
      }
      return this.content = html;
    };

    return ManifestFile;

  })();

  Manifest = (function() {

    Manifest.load = function(uri, callback) {
      var m;
      m = new Manifest({}, uri);
      return m.refresh(function(err) {
        return callback(err, m);
      });
    };

    function Manifest(options, uri) {
      if (options == null) {
        options = {};
      }
      this.uri = uri != null ? uri : null;
      this.files = [];
      this.setOptions(options);
    }

    Manifest.prototype.setOptions = function(options) {
      var _ref, _ref1, _ref2, _ref3;
      this.title = (_ref = options.title) != null ? _ref : '';
      this.slug = generateSlug(this.title);
      this.category = (_ref1 = options.category) != null ? _ref1 : null;
      this.ignoreFirstFileForToc = options.home != null;
      this.maxTocLevel = (_ref2 = options.maxTocLevel) != null ? _ref2 : 2;
      this.makeAssetsRelativeToGithub = (_ref3 = options.makeAssetsRelativeToGithub) != null ? _ref3 : false;
      return this.options = _.extend({}, options);
    };

    Manifest.prototype.addFiles = function(files, callback) {
      var d, i, lock, _i, _ref, _results,
        _this = this;
      if (callback == null) {
        callback = null;
      }
      lock = files.length;
      d = this.files.length;
      _results = [];
      for (i = _i = 0, _ref = files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var j;
          j = d + i;
          return ManifestFile.load(_this, _this.makeRelativeUri(files[i]), function(err, f) {
            if (err) {
              lock = -1;
              if (callback) {
                callback(err);
              }
              return;
            }
            _this.files[j] = f;
            if (--lock === 0) {
              _this.buildTableOfContent();
              if (callback) {
                return callback(null);
              }
            }
          });
        })());
      }
      return _results;
    };

    Manifest.prototype.buildTableOfContent = function() {
      var anchor, currentLevel, entry, file, hTag, hTags, i, level, parentScopes, scope, title, _ref, _results;
      this.tableOfContent = [];
      scope = this.tableOfContent;
      parentScopes = [];
      currentLevel = 0;
      _ref = this.files;
      _results = [];
      for (i in _ref) {
        file = _ref[i];
        if (this.ignoreFirstFileForToc && i === '0') {
          continue;
        }
        hTags = file.content.match(/<h([1-6])>.+<\/h\1>/gi);
        _results.push((function() {
          var _i, _len, _ref1, _results1;
          _ref1 = hTags || [];
          _results1 = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            hTag = _ref1[_i];
            level = parseInt(hTag.substr(2, 1));
            title = cleanHtmlString(hTag.substring(hTag.indexOf('>') + 1, hTag.lastIndexOf('<')));
            anchor = generateSlug(title);
            if (level > this.maxTocLevel) {
              continue;
            }
            if (level <= currentLevel) {
              parentScopes = parentScopes.slice(0, parentScopes.length - (currentLevel - level));
              scope = parentScopes.pop();
            }
            entry = {
              slug: file.slug,
              title: title,
              anchor: anchor,
              childs: []
            };
            scope.push(entry);
            parentScopes.push(scope);
            scope = entry.childs;
            _results1.push(currentLevel = level);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Manifest.prototype.refresh = function(callback) {
      var _this = this;
      if (callback == null) {
        callback = null;
      }
      if (this.uri) {
        return fs.readFile(this.uri, function(err, data) {
          var files, options, _ref;
          if (err) {
            return callback(err);
          }
          options = JSON.parse(data.toString());
          files = (_ref = options.files) != null ? _ref : [];
          if (options.home) {
            files.unshift(options.home);
          }
          _this.files = [];
          _this.setOptions(options);
          return _this.addFiles(files, function(err) {
            if (err) {
              return callback(err);
            }
            return _this.refreshFiles(callback);
          });
        });
      } else {
        return this.refreshFiles(callback);
      }
    };

    Manifest.prototype.refreshFiles = function(callback) {
      var _this = this;
      if (callback == null) {
        callback = null;
      }
      return async.forEach(this.files, (function(f, cb) {
        return f.refresh(cb);
      }), function(err) {
        if (err) {
          if (err) {
            callback(err);
          }
          return;
        }
        _this.buildTableOfContent();
        if (callback) {
          return callback(null);
        }
      });
    };

    Manifest.prototype.makeRelativeUri = function(uri) {
      if (!this.uri) {
        return uri;
      }
      return makeUriRelativeTo(uri, path.dirname(this.uri));
    };

    Manifest.prototype.watch = function(callback) {
      var f, watcher, _i, _len, _ref, _results,
        _this = this;
      watcher = function(curr, prev) {
        if (curr.mtime > prev.mtime) {
          return _this.refresh(callback);
        }
      };
      if (this.uri) {
        fs.watchFile(this.uri, watcher);
      }
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        _results.push(fs.watchFile(f.uri, watcher));
      }
      return _results;
    };

    return Manifest;

  })();

  module.exports = Manifest;

}).call(this);
