// Generated by CoffeeScript 1.4.0
(function() {
  var Search, http;

  http = require('http');

  Search = (function() {

    function Search(host, tenant, port) {
      this.host = host != null ? host : 'localhost';
      this.tenant = tenant != null ? tenant : 'bfdocs';
      this.port = port != null ? port : 9200;
    }

    Search.prototype.index = function(manifest, callback) {
      var c, handler, i, slug, _i, _len, _ref, _results;
      c = 1 + manifest.slugs.length;
      handler = function(res) {
        if (--c === 0 && callback) {
          return callback();
        }
      };
      this.request('put', manifest.slug, '_home', {
        body: manifest.homeData
      }, handler);
      _ref = manifest.slugs;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        slug = _ref[i];
        if (slug) {
          _results.push(this.request('put', manifest.slug, slug, {
            body: manifest.filesData[i]
          }, handler));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Search.prototype.search = function(manifest, query, callback) {
      var q;
      q = {
        query: {
          text: {
            _all: query
          }
        }
      };
      return this.request('post', manifest.slug, '_search', q, function(res) {
        var h, slugs, _i, _len, _ref;
        slugs = [];
        if (res && res.hits) {
          _ref = res.hits.hits;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            h = _ref[_i];
            slugs.push(h._id);
          }
        }
        return callback(slugs);
      });
    };

    Search.prototype.request = function(method, type, path, payload, callback) {
      var options, req;
      options = {
        host: this.host,
        port: this.port,
        method: method.toUpperCase(),
        path: this.tenant + '/' + type + '/' + path
      };
      req = http.request(options, function(res) {
        res.setEncoding('utf8');
        return res.on('data', function(data) {
          return callback(JSON.parse(data.toString()));
        });
      });
      req.on('error', function(e) {
        console.log('ERROR: ' + e.message);
        return callback(false);
      });
      req.write(JSON.stringify(payload));
      return req.end();
    };

    return Search;

  })();

  module.exports = Search;

}).call(this);
