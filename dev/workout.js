// Generated by CoffeeScript 1.4.0
/*
Module dependencies.
*/

var ListDeploymentMethods, ListGirderBaseItems, ListMakeBuildTools, ListMarkupLanguages, ListStylePreProcess, carrier, classifier, colors, fs, log, natural, program, readline, util,
  __slice = [].slice;

fs = require("fs");

util = require("util");

colors = require("colors");

program = require("commander");

carrier = require("carrier");

natural = require("natural");

readline = require("readline");

classifier = new natural.BayesClassifier();

log = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return console.log.apply(console, args);
};

ListDeploymentMethods = ['vps server', 'static', 'shared', 'paas'];

ListMarkupLanguages = ['jade', 'haml', 'html', 'zen', 'coffeekup', 'coffeescript'];

ListMakeBuildTools = ['Makefile', 'Cakefile', 'Rakefile', 'Gemfile', 'Jakefile'];

ListStylePreProcess = ['stylus', 'stylus w/nib', 'less', 'scss', 'css'];

ListGirderBaseItems = ['query', 'template', 'boilerplate', 'grid', 'framework', 'web', 'collection', 'info', 'tasks', 'site', 'interpet', 'project'];

program.version("0.0.1").option("-b, --robot", "Interactive Read Object Build Output Terminal -loop").option("-k, --keycode", "Access internal mechanisms with special codes").option("-l, --list", "List Bender modules in core and online").option("-c, --config <file>", "Location of the configuration file").option("-w, --web", "Fire up a web instance").command("train").description("Learn Bender so bad stuff and he'll learn from you.").action(function(options) {
  var rl;
  rl = readline.createInterface(process.stdin, process.stdout);
  rl.setPrompt("ROBOT> ");
  rl.prompt();
  return rl.on("line", function(line) {
    var expect;
    switch (line.trim()) {
      case "2716057":
        program.password("Password:", "*", function(pass) {
          if (pass === 1729) {
            log("%s", pass);
            log("I'm Bender, baby, please insert liquor!");
            return rl.setPrompt("R0B4D> ");
          } else {
            return log("Please try again");
          }
        });
        break;
      case "web":
        program.choose(listHtml, 1, function(i) {
          return log("You chose %d %s", i + 1, listHtml[i]);
        });
        break;
      default:
        log("My name is Bender. Please insert girder `" + line.trim() + "`");
        rl.setPrompt("expected result? ");
        expect = rl.prompt();
        classifier.addDocument(line, expect);
        rl.setPrompt("ROBOT> ");
        classifier.train();
    }
    return rl.prompt();
  }).on("close", function() {
    var goodbye;
    goodbye = ["Bite my shiny metal ass!", "What do you mean 'we,' flesh-tube?", "That's no alien spaceship-that's my ass!"];
    console.log(goodbye[Math.floor(Math.random() * goodbye.length)]);
    classifier.save('classifier.json', function(err, classifier) {
      if (err) {
        log(err);
      }
      return log("saved classifier file...ok");
    });
    return process.exit(0);
  });
});

program.parse(process.argv);
