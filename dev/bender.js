// Generated by CoffeeScript 1.4.0
/*
Module dependencies.
*/

var ListDeploymentMethods, ListGirderBaseItems, ListMakeBuildTools, ListMarkupLanguages, ListStylePreProcess, carrier, cfg, colors, fs, log, natural, program, readline, rl, util,
  __slice = [].slice;

fs = require("fs");

util = require("util");

colors = require("colors");

program = require("commander");

carrier = require("carrier");

natural = require("natural");

readline = require("readline");

log = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return console.log.apply(console, args);
};

ListDeploymentMethods = ['vps server', 'static', 'shared', 'paas'];

ListMarkupLanguages = ['jade', 'haml', 'html', 'zen', 'coffeekup', 'coffeescript'];

ListMakeBuildTools = ['Makefile', 'Cakefile', 'Rakefile', 'Gemfile', 'Jakefile'];

ListStylePreProcess = ['stylus', 'stylus w/nib', 'less', 'scss', 'css'];

ListGirderBaseItems = ['query', 'template', 'boilerplate', 'grid', 'framework', 'web', 'collection', 'info', 'tasks', 'site', 'interpet', 'project'];

program.version("0.0.1").option("-b, --robot", "Interactive Read Object Build Output Terminal -loop").option("-k, --keycode", "Access internal mechanisms with special codes").option("-l, --list", "List Bender modules in core and online").option("-c, --config <file>", "Location of the configuration file").option("-w, --web", "Fire up a web instance").command("insert [girder]").description("Use a basic building block, a girder, have bender work it.").option("-f, --full_auto [yes|no]").action(function(girder, options) {
  var mode;
  mode = options.full_auto || false;
  return girder = girder || "query";
});

if (program.config != null) {
  cfg = program.config;
}

log("Bender was configured with:");

if (program.keycodes) {
  log("  - keycodes");
}

if (program.robot) {
  log("  - interactive bot");
}

log("  - %s config", cfg);

log(program.args);

carrier.carry(fs.createReadStream("../var/data/art/ascii-bender-header.txt"), (function(line) {
  return log(line);
}), "ASCII");

if (program.bot) {
  rl = readline.createInterface(process.stdin, process.stdout);
  rl.setPrompt("ROBOT> ");
  rl.prompt();
  rl.on("line", function(line) {
    switch (line.trim()) {
      case "2716057":
        program.password("Password:", "*", function(pass) {
          if (pass === 1729) {
            log("%s", pass);
            log("I'm Bender, baby, please insert liquor!");
            return rl.setPrompt("R0B4D> ");
          } else {
            return log("Please try again");
          }
        });
        break;
      case "web":
        program.choose(listHtml, 1, function(i) {
          return log("You chose %d %s", i + 1, listHtml[i]);
        });
        break;
      default:
        log("My name is Bender. Please insert girder `" + line.trim() + "`");
    }
    return rl.prompt();
  }).on("close", function() {
    console.log("Bite my shiny metal ass!");
    return process.exit(0);
  });
}

program.prompt("Username: ", function(name) {
  log("hi %s\n", name);
  return program.prompt("Description:", function(desc) {
    log("description was %s", desc.trim());
    return program.prompt("Age: ", Number, function(age) {
      log("age: %j\n", age);
      return program.prompt("Birthdate: ", Date, function(date) {
        log("date: %s\n", date);
        return process.stdin.destroy();
      });
    });
  });
});
